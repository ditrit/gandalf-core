# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import connectorEvent_pb2 as connectorEvent__pb2
from . import connector_pb2 as connector__pb2


class ConnectorEventStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendEventMessage = channel.unary_unary(
                '/grpc.ConnectorEvent/SendEventMessage',
                request_serializer=connectorEvent__pb2.EventMessage.SerializeToString,
                response_deserializer=connector__pb2.Empty.FromString,
                )
        self.WaitEventMessage = channel.unary_unary(
                '/grpc.ConnectorEvent/WaitEventMessage',
                request_serializer=connectorEvent__pb2.EventMessageWait.SerializeToString,
                response_deserializer=connectorEvent__pb2.EventMessage.FromString,
                )
        self.WaitTopicMessage = channel.unary_unary(
                '/grpc.ConnectorEvent/WaitTopicMessage',
                request_serializer=connectorEvent__pb2.TopicMessageWait.SerializeToString,
                response_deserializer=connectorEvent__pb2.EventMessage.FromString,
                )
        self.CreateIteratorEvent = channel.unary_unary(
                '/grpc.ConnectorEvent/CreateIteratorEvent',
                request_serializer=connector__pb2.Empty.SerializeToString,
                response_deserializer=connector__pb2.IteratorMessage.FromString,
                )


class ConnectorEventServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendEventMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitEventMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitTopicMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIteratorEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorEventServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendEventMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEventMessage,
                    request_deserializer=connectorEvent__pb2.EventMessage.FromString,
                    response_serializer=connector__pb2.Empty.SerializeToString,
            ),
            'WaitEventMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitEventMessage,
                    request_deserializer=connectorEvent__pb2.EventMessageWait.FromString,
                    response_serializer=connectorEvent__pb2.EventMessage.SerializeToString,
            ),
            'WaitTopicMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitTopicMessage,
                    request_deserializer=connectorEvent__pb2.TopicMessageWait.FromString,
                    response_serializer=connectorEvent__pb2.EventMessage.SerializeToString,
            ),
            'CreateIteratorEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIteratorEvent,
                    request_deserializer=connector__pb2.Empty.FromString,
                    response_serializer=connector__pb2.IteratorMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.ConnectorEvent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectorEvent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendEventMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ConnectorEvent/SendEventMessage',
            connectorEvent__pb2.EventMessage.SerializeToString,
            connector__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitEventMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ConnectorEvent/WaitEventMessage',
            connectorEvent__pb2.EventMessageWait.SerializeToString,
            connectorEvent__pb2.EventMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitTopicMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ConnectorEvent/WaitTopicMessage',
            connectorEvent__pb2.TopicMessageWait.SerializeToString,
            connectorEvent__pb2.EventMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIteratorEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ConnectorEvent/CreateIteratorEvent',
            connector__pb2.Empty.SerializeToString,
            connector__pb2.IteratorMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
